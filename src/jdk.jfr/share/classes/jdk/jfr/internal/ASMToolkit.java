/*
 * Copyright (c) 2016, 2022, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package jdk.jfr.internal;

import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.lang.constant.ClassDesc;
import static java.lang.constant.ConstantDescs.*;
import jdk.internal.classfile.ClassModel;
import jdk.internal.classfile.Classfile;
import jdk.internal.classfile.components.ClassPrinter;
import jdk.jfr.ValueDescriptor;

final class ASMToolkit {
    private static final ClassDesc CD_Thread = ClassDesc.ofDescriptor(Thread.class.descriptorString());

    public static ClassDesc toType(ValueDescriptor v) {
        return switch (v.getTypeName()) {
            case "byte" -> CD_byte;
            case "short" -> CD_short;
            case "int" ->  CD_int;
            case "long" -> CD_long;
            case "double" -> CD_double;
            case "float" -> CD_float;
            case "char" -> CD_char;
            case "boolean" -> CD_boolean;
            case "java.lang.String" -> CD_String;
            case "java.lang.Thread" -> CD_Thread;
            case "java.lang.Class" -> CD_Class;
            default -> throw new Error("Not a valid type " + v.getTypeName());
        };
    }

    /**
     * Converts "int" into "I" and "java.lang.String" into "Ljava/lang/String;"
     *
     * @param typeName
     *            type
     *
     * @return descriptor
     */
    public static ClassDesc getDescriptor(String typeName) {
        return switch (typeName) {
            case "int" -> CD_int;
            case "long" -> CD_long;
            case "boolean" -> CD_boolean;
            case "float" -> CD_float;
            case "double" -> CD_double;
            case "short" -> CD_short;
            case "char" -> CD_char;
            case "byte" -> CD_byte;
            default -> ClassDesc.ofInternalName(getInternalName(typeName));
        };
    }

    /**
     * Converts java.lang.String into java/lang/String
     *
     * @param className
     *
     * @return internal name
     */
    public static String getInternalName(String className) {
        return className.replace(".", "/");
    }

    public static void logASM(String className, byte[] bytes) {
        Logger.log(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.INFO, "Generated bytecode for class " + className);
        if (Logger.shouldLog(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.TRACE)) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PrintWriter w = new PrintWriter(baos);
            w.println("Bytecode:");
            ClassPrinter.toYaml(Classfile.parse(bytes), ClassPrinter.Verbosity.TRACE_ALL, w::append);
            Logger.log(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.TRACE, baos.toString());
        };
    }
}
